CSS Getting Started:
	-CSS3: currently in development (In Development)
	-THERE WILL NEVER BE CSS 4: because 3 is being split into modules: (colors, animation)
	-SCHEDULE:	
		*Basic: 		Sec 2:Basics - Sec 6: Positioning
		*Advanced: 	Sec 7:Backrounds and images - Sec 12:Text and Fonts
		*Expert:		Sec 13:Flexbox - Sec 18:Sass

Diving into the Basics of CSS:
	-Inline Styles:			<someTag style="property: value;

	-<style> tags:			<style>
						selector { //A selector applies this css to all named tag <selector>
							property: value;
						}
					</style>

	-.css Files:			-You can put your CSS rules in a file like main.css
					-Link the css to html with:	<link rel="stylesheet" href="somePath"> //no closing tag

	-Properties and Values:		-backround: #345677 			//Background Color
					-color: #123456 			//Text Color
					-font-family: sans-serif 		//Changes the font family
						*You can use Google Fonts > + > Import Link above our style link > Add rule
	
	-Selectors:			-Element Selectors:
						* Applied to all tags
						* Selector is defined as follows:	someTagName{props:vals;}
					-Class Selectors:
						* Applied to tags with class="" attributes
						* Selector is defined as follows:	.someClassName{props:vals;}
					-Universal Selectors:
						* Applied to every element in the page
						* Selector is defined as follow:	* {props:vals;}
					-ID Selectors:
						* Applied to one element with id="" attribute
						* Selector is defined as follow:	#someIDName {props:vals;}
					-Attribute Selectors:
						* Applied to elements based on their attributes
						* Selector is defined as follow:	[someAttributeName] {props:vals;}

	-Cascading Style(specificity):	-Inline styles have the highest priority
					-If two rules manipulate the same property. The one with higher specificity wins
					 (ex: class selectors beats element selectors)
					-If there are multiple rules with the same selector. The last on in the file is applied
					-Specificity:(Descending from high to low priority)
						1)Inline Styles
						2)#ID selectors
						3).class, :pseudo-class and [attribute] selectors
						4)<tag> and pseudo-element selectors
						5)*Universal selector
						6)Browser provided styles

	-Inheritance:			-We can propagate down a rule simply by styling a parent that has child elements.
					-Although, if a child defines their own rule then the specificity is better for that child and overrides the parent's
					-Having a rule in the body tag is perfect for propagating rules to every element

	-Combinators:			-Allow us to combine multiple selectors to be more precise about what we select.
					-Ex:	#someID h1 {}	=	"Any h1 tag inside of #someID
					-This increases specificity
					-FOUR IMPORTANT TYPES OF COMBINATORS(examples use two, but can be more):
						1) Adjacent Sibling:
							* Notation: +
							* Ex:	h2 + p	=  "Assigns to all paragraphs that directly follow an h2 tag"
						2) General Sibling:
							* Notation: ~
							* Ex:	h2 ~ p	=  "Assigns to all paragraphs that have a sibling h2 anywhere; order doesn't matter."
						3) Child:
							* Notation: >
							* Ex:	div > p	=  "Any paragraph that's a DIRECT child of a div should get the style"
						4) Descendant
							* Notation: <whitespace>
							* Ex:	div p =    "Any paragraph that's a descendant of a div should get a style" (Direct not needed)

DIVING DEEPER INTO CSS:
	-CSS Box Model:			-In the webpage, HTML interprets elements as boxes (Check inspector below properties for visuals)
					-Every element has content, padding, border, and margins
					-CSS properties: 
							* padding: 20px; 
							* border: 5px black solid; (this is shorthand)

	-Default Margins:		-By default, the <body> element has a default margin of 8px. We can remove this with margin: 0px;

	-Margin Collapsing:		-The bigger margin of two adjacent box elements is the things that separates both from each other,
					 therefore the margins don't add up, they "collapse" onto each other.

	-Shorthand properties:		-Combine values of multiple other properties, into a single property.
						* EX:
							** Separate properties:
										border-width: 2px;
										border-style: dashed (or solid);
										border-color: orange;
							** Shorthand property:
										border: 2px solid orange;
					-The order doesn't matter as long as each property uses a different value.
					-margin has a shorthand for its margin-top , right, bottom, left properties like so:
						* margin: 5px, 10px, 5px, 10px; (in the order above) (there's a 2 side version using only two Vals for top/down)

	-Height & Width properties:	-Can have relative values (%) or absolute values (px)
					-Width can take up the full width of the page. 
					-Height can not take up the full height of a page. 100% refers to the available height given by the parent's container.
						*Quirky. 100% needs to be chained down from <html> in order to get it to work like width's 100%
						*Better to use absolute values.
					-The width and height by default manipulates only the content section our CSS box. Therefore if you add padding, borders
					 and margins. IT maybe glitchy at 100%. THIS IS BECAUSE THE PROPERTY box-sizing IS SET TO content-box by default.
					 You could set for everything before the margin section to be included in width and height calculations by setting
					 the value border-box . THIS VALUE IS SO COMMON BECAUSE THAT IS THE EFFECT WE WANT TO KEEP EVERYTHING BALANCED. ILL' REPEAT:
						
						*IMPORTANT PROPERTY (from above) - box-sizing: border-box;
						**This is something you should wrap in a universal selector for all elements to use.

	-Display Property:		-Allows us to change the behavior of an element from block to inline (bidirectional) and even remove the element from the DOM
						*Inline elements don't take the full width of the screen, and don't have margin top/bottom. Blocks do.
					-The property is display: and has the values -
						* block 	(makes an element into a block)
						* inline
						* none	(makes an element invisible in the DOM but doesn't remove it from the DOM) 
							(visibility: hidden; is similar but it blocks content from taking its place)
						* inline-block (keep the behavior of blocks, but they can go next to each other now)
					-Later on we see flex box which is better.
					

















